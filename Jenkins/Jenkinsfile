node('Build') {
    def repo = 'frontend-api'
    stage('Checkout') {
        def gitBranch = 'develop'
        def gitUrl = env.CIT_GIT_FRONTEND_API_URL
        git branch: gitBranch, url: gitUrl
        echo "Checking out $repo form $gitUrl, branch $gitBranch"
    }

    def tp = buildImageTagFromPackageJsonFile()
    env.BUILD_NUMBER_API = tp
    def artifactory = env.ARTIFACTORY_HOST
    def urlArt = "https://${artifactory}"
    def imagePath = env.ARTIFACTORY_PATH
    def imageName = "frontend-api"
    def artCredentialID = '1c5d5f9a-db60-4799-9f6f-6d12750f5f7f'
    def devMongodbCredentialID = 'dev_mongodb_account'
    def imageTag = env.BUILD_NUMBER_API
    def sshUser = env.DEV_SSH_USER

    stage('Build docker image') {
        //push to artifactory
        withDockerRegistry(credentialsId: artCredentialID, url: urlArt)  {
            sh "docker build --label $imageName -t $artifactory/$imagePath/$imageName:$imageTag ./"
            sh "docker push $artifactory/$imagePath/$imageName:$imageTag"
        }
    }
    stage('Prepare dev server') {
        sshagent([sshUser]) {
            // Clean up running containers
            def script = """docker ps -f label=$imageName -q | xargs --no-run-if-empty docker stop
                        docker ps -a -f label=$imageName -q | xargs --no-run-if-empty docker rm
                        docker images -f label=$imageName -q | xargs --no-run-if-empty docker rmi --force
            """
            writeFile file: 'build_frontend_api.sh', text: "${script}"
            sh "scp -oStrictHostKeyChecking=no build_frontend_api.sh ${sshUser}@${env.DEV_HOST}:"
            sh "ssh -oStrictHostKeyChecking=no ${sshUser}@${env.DEV_HOST} bash build_frontend_api.sh"
            sh "ssh -oStrictHostKeyChecking=no ${sshUser}@${env.DEV_HOST} rm build_frontend_api.sh"
        }
    }

    stage('Deploy to dev server') {
        sshagent([sshUser]) {
            withCredentials([
                usernamePassword(credentialsId: devMongodbCredentialID, usernameVariable: 'MONGO_USER', passwordVariable: 'MONGO_PASS')
            ]) {
                withDockerRegistry(credentialsId: artCredentialID, url: urlArt)  {
                    sh returnStdout: true, script: "ssh -oStrictHostKeyChecking=no ${sshUser}@${env.DEV_HOST} docker pull $artifactory/$imagePath/$imageName:$imageTag"
                    sh returnStdout: true, script: """ssh -oStrictHostKeyChecking=no ${sshUser}@${env.DEV_HOST} docker run -d -p 9191:9191 -e MONGODB_USER=$MONGO_USER -e MONGODB_PASSWORD=$MONGO_PASS -e ENV=dev -e MONGODB_HOST=${env.DEV_MONGO_HOST} -e WHITELIST_CORS=${env.DEV_MONGO_WHITELIST_CORS} $artifactory/$imagePath/$imageName:$imageTag"""
                }
            }
        }
    }
}

String buildImageTagFromPackageJsonFile() {
    def packageJson = readJSON file: './package.json'
    def version = packageJson.version
	def gitRev = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
	return "dev-$version-$gitRev"
}
