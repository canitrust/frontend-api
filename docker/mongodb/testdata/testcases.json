[
  {
    "testNumber": 1,
    "title": "includeSubdomains Attribute in HSTS Headers",
    "description": "How is the 'includeSubdomains' attribute interpreted in the browser? If a page 'https://foo.bar.com' sets an HSTS header with the 'includeSubdomains' attribute, what happens if the browser subsequently visits pages in the same domain using only HTTP, like 'http://sub.foo.bar.com' (a subdomain), 'http://baz.bar.com' (a different host in the same domain), 'http://bar.com' (the base domain without any hosts)? Are those pages called via HTTP or HTTPS?",
    "date_created": "1/17/2019",
    "tagNums": [
      4,
      8
    ],
    "path": "includeSubdomains-in-HSTS",
    "question": "Which page was called via HTTPS and was therefore included in the 'includeSubdomains' attribute?",
    "possibleAnswers": [
      {
        "ans_id": 0,
        "ans_desc": "'includeSubdomains' or HSTS is not supported at all."
      },
      {
        "ans_id": 2,
        "ans_desc": "Only sub.foo.bar.com called via HTTPS"
      },
      {
        "ans_id": 3,
        "ans_desc": "sub.foo.bar.com and baz.bar.com called via HTTPS, the browser includes neighbour hosts when 'inculdeSubdomains' is set."
      },
      {
        "ans_id": 4,
        "ans_desc": "sub.foo.bar.com and bar.com called via HTTPS, the browser includes the base domain when 'inculdeSubdomains' is set."
      },
      {
        "ans_id": 5,
        "ans_desc": "sub.foo.bar.com, baz.bar.com and bar.com called via HTTPS, the browser includes neighbour hosts and the base domain when 'inculdeSubdomains' is set."
      }
    ]
  },
  {
    "testNumber": 2,
    "title": "HSTS Headers via plain http",
    "description": "Does the browser accept an HSTS header when set by a non-HTTPS web site? This should not be the case as it would allow for man-in-the-middle attacks.",
    "detailedDescription": "### Introduction\nThe [Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) HTTP header, often called HSTS, instructs the browser how SSL/TLS should be handled for this web site, e.g.:\n``` \nStrict-Transport-Security: max-age=31536000\n```\nThe above example tells the browser a number of things:\n1. This web site must only be called via HTTPS, never via HTTP.\n2. If an HTTP connection for this web site is requested, the browser automatically upgrades to HTTPS.\n3. This setting will be stored in the browaser for 31536000 seconds or 1 year.\n\nThis header is an important defence against man-in-the-middle attacks where an attacker tries to intercept connections before the SSL encryption is active and change HTTPS links to HTTP (so-called [SSL stripping](https://moxie.org/software/sslstrip/) attacks).\n\n### Problem\nImagine the browser requests ``http://www.canitrust.in`` (note the ``http://`` part) and the server sends a ``Strict-Transport-Security`` header in the reponse:\n```\nHTTP/1.1 200 OK\n[...]\nStrict-Transport-Security: max-age=31536000\n[...]\n```\nIn this example, the server tried to set the ``Strict-Transport-Security`` header for a web site that was loaded via HTTP. This should not work as it would allow attackers to intercept the request and set different HSTS headers or turn them off completely.\n\n### How does the browser react?\nWhen the browser receives an HSTS header when loading a non-HTTPS web site, it has the following two options:\n\n1. Ignore the header and not store any HSTS setting from this request. This is the correct and secure implementation.\n2. Accept the header and store its HSTS setting. This is a vulnerable implementation.\n\nThis testcase tests which browser chooses which of these two options.",
    "date_created": "11/28/2019",
    "tagNums": [
      4
    ],
    "path": "hsts-via-plain-http",
    "question": "Is the HSTS header processed if received via plain http?",
    "possibleAnswers": [
      {
        "ans_id": 1,
        "ans_desc": "No"
      },
      {
        "ans_id": 0,
        "ans_desc": "Yes"
      }
    ],
    "variations": [
      {
        "id": 0,
        "data": {
          "json": "test"
        },
        "title": "test",
        "description": "test"
      },
      {
        "id": 1,
        "data": {
          "json": "test 2"
        },
        "title": "Test variation 2",
        "description": "Test variation 2"
      }
    ],
    "variationOverview": "text - to be displayed on frontend UI"
  },
  {
    "testNumber": 6,
    "title": "Contradicting Cookie Headers",
    "description": "Which cookie prevails in case of contradicting cookie headers? The first or the second? Or does the browser even completely ignore the cookie?",
    "detailedDescription": "# Introduction\nCookies are key-value pairs which the server can set in the calling browser, like so:\n``` \nSet-Cookie: foo=bar; Max-Age=2592000; HttpOnly\n```\nIf a request is made to a server, the browser will automatically send all cookies stored for this [origin](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin). This is particularly usefull for [session management](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#cookies) where cookies will be used to store session identifiers (session IDs). This behaviour makes such session cookies highly security relevant.\n\n# Problem\nNow imagine that a server sends two ``Set-Cookie`` headers to the browser which contain two different values for the same cookie, e.g.:\n```\nGET /index.html HTTP/1.1\nHost: www.canitrust.in\n[...]\nSet-Cookie: foo=value1;\nSet-Cookie: foo=value2;\n[...]\n```\nThis can happen if two infrastructure components (e.g. application server and web server) both try to control the cookie and pick different values which leads to unpredictable behaviour.\n\n# How does the browser react?\nWhen receiving two contradicting values for the same cookie in separate ``Set-Cookie`` headers, the browser now  has three options:\n\n1. Accept the header which is listed first in the HTTP request and ignore the second.\n2. Accept the second header and ignore the first.\n3. Ignore the cookie altogether.\n\nThis testcase tests which browser chooses which of these options.",
    "date_created": "1/17/2019",
    "tagNums": [
      2,
      7
    ],
    "path": "contradicting-cookie-headers",
    "question": "Which cookie wins?",
    "possibleAnswers": [
      {
        "ans_id": 2,
        "ans_desc": "The first"
      },
      {
        "ans_id": 3,
        "ans_desc": "The second"
      },
      {
        "ans_id": 0,
        "ans_desc": "Neither"
      }
    ]
  },
  {
    "testNumber": 8,
    "title": "Foreign Domain Attribute in Cookie Declaration",
    "description": "What happens if a server sets a cookie that has a foreign domain set in the domain attribute? Is the cookie ignored by the browser?",
    "date_created": "1/17/2019",
    "tagNums": [
      2
    ],
    "path": "foreign-domains-in-cookies",
    "question": "Is the cookie with the foreign domain attribute ignored?",
    "possibleAnswers": [
      {
        "ans_id": 1,
        "ans_desc": "Yes"
      },
      {
        "ans_id": 0,
        "ans_desc": "No"
      }
    ]
  },
  {
    "testNumber": 9,
    "title": "HttpOnly Handling in JavaScript",
    "description": "What happens if a JS script tries to set a cookie with the httpOnly flag? Does the browser allow this? Does it allow the cookie to be read afterwards?",
    "date_created": "1/17/2019",
    "tagNums": [
      2,
      6
    ],
    "path": "js-setting-httponly-cookies",
    "question": "Can JavaScript set and read httpOnly cookies?",
    "possibleAnswers": [
      {
        "ans_id": 1,
        "ans_desc": "No"
      },
      {
        "ans_id": 10,
        "ans_desc": "Set but not read"
      },
      {
        "ans_id": 0,
        "ans_desc": "Yes"
      }
    ]
  },
  {
    "testNumber": 13,
    "title": "Contradicting CSP and X-Frame-Options Headers",
    "description": "Which policy is enforced if both a Content Security Policy and the X-Frame-Options header govern the embedding into other pages? The spec says, CSP should take precedence (https://w3c.github.io/webappsec/specs/content-security-policy/#frame-ancestors-and-frame-options).",
    "date_created": "05/20/2019",
    "tagNums": [
      3,
      1,
      7
    ],
    "path": "CSP-and-X-Frame-Options-working-together",
    "question": "Which header takes precedence?",
    "possibleAnswers": [
      {
        "ans_id": 2,
        "ans_desc": "CSP"
      },
      {
        "ans_id": 3,
        "ans_desc": "X-Frame-Options"
      }
    ]
  },
  {
    "testNumber": 14,
    "title": "Contradicting CSP Declarations",
    "description": "Which Content Security Policy is enforced if there are two contradicting declarations? The first? The second?",
    "detailedDescription": "# Introduction\nThe [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) or CSP allows a web application to give detailed instructions to the browser about how to handle its content. This usually happens with an HTTP header like:\n``` \nContent-Security-Policy: default-src 'none'; script-src canitrust.in\n```\nThe above example tells the browser to not load any ressources by default (no images, scripts, etc.) and allows scripts to be only loaded from ``canitrust.in``.\n\n# Problem\nNow imagine that a server sends ambiguous or even contradicting CSP headers to the browser, e.g.:\n```\nGET /index.html HTTP/1.1\nHost: www.canitrust.in\n[...]\nContent-Security-Policy: default-src 'none'; script-src foo.canitrust.in\nContent-Security-Policy: default-src 'self'\n[...]\n```\nAs we are on the host ``www.canitrust.in``, the first CSP header in the above example allows scripts to be loaded only from ``foo.canitrust.in``. Contradicting this, the second CSP header allows scripts to be only loaded from ``self`` which results in ``www.canitrust.in`` in this case.\n\nIf the requested page now tries to load a script from, e.g. ``foo.canitrust.in`` like this\n```\n<html>\n  <head>\n    <script src=\"http://foo.canitrust.in/script.js\" />\n  </head>\n  <body>[...]</body>\n</html>\n```\nIf the browser follows the first CSP header the script in this example should be loaded. If the browser accepts the second CSP though, no script should be loaded as the host is not allowed.\n\n# How does the browser react?\nWhen receiving contradicting CSP headers, the browser now basically has two options:\n1. Accept the header which is listed first in the HTTP request and ignore the second.\n2. Accept the second header and ignore the first.\n\nThis testcase tests which browser chooses which of the two options.",
    "date_created": "1/17/2019",
    "tagNums": [
      1,
      7
    ],
    "path": "contradicting-CSP-declarations",
    "question": "Which of the two CSP declarations is enforced?",
    "possibleAnswers": [
      {
        "ans_id": 3,
        "ans_desc": "The first"
      },
      {
        "ans_id": 2,
        "ans_desc": "The second"
      },
      {
        "ans_id": 9,
        "ans_desc": "Error in test execution of the Safari browser, most probably a bug in one of the test components."
      }
    ]
  },
  {
    "testNumber": 15,
    "title": "Frame-src vs. child-src in CSP",
    "description": "When a CSP header contains a frame-src directive, this defines from which sources iframes can be loaded. As fallback, child-src should be used. How does the browsers behave when both frame-src and child-src are defined? Does it follow the frame-src? Or both definitions? Does it block the CSP declaration due to conflicts?",
    "detailedDescription": "# Introduction\nSome browsers offer a feature called XSS Auditor (Chrome) or [XSS Filter](https://blogs.msdn.microsoft.com/ie/2008/07/02/ie8-security-part-iv-the-xss-filter/) (Internet Explorer, Edge) which is intended to offer the user some basic protection against [reflected Cross-site Scripting](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)) attacks. These protection mechanisms have a default setting in the browser but can also be controlled by the server by setting the following HTTP header:\n``` \nX-XSS-Protection: 1; mode=block\n```\nIn the above example, the server tells the browsers supporting this feature to switch XSS protection on (by setting the value to ``1``) and also to block loading the page in case an XSS attack is detected (with ``mode=block``). Other potential values for this header are:\n``` \nX-XSS-Protection: 0\nX-XSS-Protection: 1\n```\nWith these, value ``0`` instructs the browser to turn off the protection and value ``1`` without ``mode=block`` instructs the browser to filter the identified attack payload instead of blocking the request.\n\nThe protection offered by this feature is rather limited and must therefore not be considered an adequate protection against XSS attacks. Also, browsers which do not support this feature (Firefox, Safari, Opera, etc.) will just ignore the header.\n\n# Problem\nEver since the XSS protection features were introduced, researchers have been finding [ways around the protection](https://github.com/EdOverflow/bugbounty-cheatsheet/blob/master/cheatsheets/xss.md) or even [XSS](http://p42.us/ie8xss/Abusing_IE8s_XSS_Filters.pdf) that was only possible due to the XSS Filter. Google and Microsoft have been struggling to keep up up with these vulnerabilities.\n\nMore recently, researchers have found more attacks that are only possible because of the [XSS Filter](https://www.slideshare.net/codeblue_jp/xss-attacks-exploiting-xss-filter-by-masato-kinugawa-code-blue-2015) or [Chrome's XSS Auditor](https://portswigger.net/research/abusing-chromes-xss-auditor-to-steal-tokens). The largest category of those attacks are so-called [Cross-site Leaks](https://portswigger.net/daily-swig/new-xs-leak-techniques-reveal-fresh-ways-to-expose-user-information) and [lots of them](https://github.com/xsleaks/xsleaks/wiki/Links) are only possible due to the XSS Filter or the XSS Auditor.\n\nDue to this series of problems and vulnerabilities first Microsoft decided to turn off the XSS Filter in Edge as described in [this blog post](https://blogs.windows.com/windowsexperience/2018/07/25/announcing-windows-10-insider-preview-build-17723-and-build-18204/#0hOpeoUeI62wJyD1.97) (interestingly, the announcement about new Emojis in the same post gets more than 5 times the screen real estate). Google first tried to fix some vulnerabilities in Chrome's XSS Auditor by switching the default from blocking (``X-XSS-Protection: 1; mode=block``) to filtering (``X-XSS-Protection: 1``) and back to blocking, but eventually gave in and [retired the XSS Auditor](https://bugs.chromium.org/p/chromium/issues/detail?id=968591) with version 78.\n\nFor further reading on the topic we suggest two excelent articles by the folks from Portswigger:\n* [Google deprecates XSS Auditor for Chrome](https://portswigger.net/daily-swig/google-deprecates-xss-auditor-for-chrome)\n* [XSS protection disappears from Microsoft Edge](https://portswigger.net/daily-swig/xss-protection-disappears-from-microsoft-edge)\n\n# How does the browser react?\nWhen the browser receives an HTTP header as follows:\n``` \nX-XSS-Protection: 1; mode=block\n```\nIt then has a few options on how to react:\n\n  1. The browser complies and turns on XSS protection in blocking mode. This is what Chrome, Internet Explorer and Edge have been doing for most of the time. As described above, this behaviour is now considered vulnerable and deprecated and should therefore be avoided.\n\n  2. The browser can ignore the header and fall back to it's default mode. Here each of the three modes could theoretically be a default:\n\n    a. Do not use XSS protection at all. This is what Firefox, Safari, Opera have always been doing and what Chrome is doing since version 78. This should be considered the most secure option at the moment.\n\n    b. Use XSS protection but in filter mode. This option does not make much sense.\n\n    c. Use XSS protection in block mode. This option is not distinguishable from option 1 in this case.\n\nThis testcase tests which browser chooses which of these options.",
    "date_created": "08/28/2019",
    "tagNums": [
      1,
      7,
      11,
      12
    ],
    "path": "frame-src-and-child-src-in-CSP",
    "question": "Which of the two CSP declarations is enforced for iframe sources?",
    "possibleAnswers": [
      {
        "ans_id": 1,
        "ans_desc": "frame-src is enforced, child-src is ignored"
      },
      {
        "ans_id": 6,
        "ans_desc": "Both frame-src and child-src can be used"
      },
      {
        "ans_id": 7,
        "ans_desc": "Only child-src is enforced, frame-src is ignored"
      },
      {
        "ans_id": 9,
        "ans_desc": "Both frame-src and child-src are ignored"
      }
    ]
  },
  {
    "testNumber": 16,
    "title": "Contradicting X-Frame-Options Headers",
    "description": "Which Policy is enforced, if the server sends two contradicting X-Frame-Options headers? Alway the first or the last header set? Or does the most restrictive header have precedence?",
    "date_created": "10/12/2018",
    "tagNums": [
      3,
      7
    ],
    "path": "contradicting-x-frame-options",
    "question": "Which X-Frame-Options header is used?",
    "possibleAnswers": [
      {
        "ans_id": 2,
        "ans_desc": "The last header"
      },
      {
        "ans_id": 3,
        "ans_desc": "The first header"
      },
      {
        "ans_id": 4,
        "ans_desc": "Allow-From headers have precedence"
      },
      {
        "ans_id": 5,
        "ans_desc": "The most restrictive header"
      }
    ]
  },
  {
    "testNumber": 20,
    "title": "no-store in Cache-Control Declaration",
    "description": "What effect does the header Cache-Control: no-store have? How does the browser behave if a page which sets this header is visited twice? Is the page requested a second time or is the cached version used?",
    "date_created": "1/17/2019",
    "tagNums": [
      5
    ],
    "path": "no-store-in-cache-control",
    "question": "How does the browser behave?",
    "possibleAnswers": [
      {
        "ans_id": 2,
        "ans_desc": "Page is requested a second time"
      },
      {
        "ans_id": 3,
        "ans_desc": "Page is not requested a second time"
      }
    ]
  },
  {
    "testNumber": 72,
    "title": "Contradicting HSTS Headers",
    "description": "Which Policy is enforced, if the server sends two contradicting Strict-Transport-Security (HSTS) headers? Alway the first or the last header set by the server? Or does the most restrictive header have precedence?",
    "date_created": "07/03/2019",
    "tagNums": [
      4,
      7
    ],
    "path": "contradicting-HSTS-headers",
    "question": "Which HSTS header is used?",
    "possibleAnswers": [
      {
        "ans_id": 3,
        "ans_desc": "The last header"
      },
      {
        "ans_id": 4,
        "ans_desc": "The first header"
      },
      {
        "ans_id": 2,
        "ans_desc": "The header with the longest max-age value (the most restrictive)"
      },
      {
        "ans_id": 5,
        "ans_desc": "The header with the shortest max-age value (the least restrictive)"
      }
    ]
  }
]